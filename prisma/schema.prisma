// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// enum UserRole {
//   ADMIN
//   USER
// }

model UserRole {
  UserRole   String      @unique
  User       User[]
  AccessUrls AccessUrl[]
  AccessApi  AccessApi[]
}

model AccessUrl {
  id       String   @id @default(cuid())
  url      String
  UserRole UserRole @relation(fields: [role], references: [UserRole])
  role     String
  create   Boolean  @default(false)
  read     Boolean  @default(false)
  update   Boolean  @default(false)
  delete   Boolean  @default(false)
}

model AccessApi {
  id       String   @id @default(cuid())
  api      String
  UserRole UserRole @relation(fields: [role], references: [UserRole])
  role     String
  create   Boolean  @default(false)
  read     Boolean  @default(false)
  update   Boolean  @default(false)
  delete   Boolean  @default(false)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  userRole              UserRole               @relation(fields: [role], references: [UserRole])
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  role                  String                 @default("USER")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// TODO: update models to not have necessarily

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
